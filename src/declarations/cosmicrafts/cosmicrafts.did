type Users = 
 record {
   gamesPlayed: GamesPlayed;
   gamesWon: GamesWon;
   highscore: Highscore__1;
   id: UserId;
   level: Level;
   score: ScoreCC__1;
   user: UserName__1;
   wallet: UserWallet__1;
 };
type UserWallet__1 = text;
type UserWallet = text;
type UserName__1 = text;
type UserName = text;
type UserId = principal;
type ScoreCC__1 = nat64;
type ScoreCC = nat64;
type Score = 
 record {
   Player__1;
   nat;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type RegisterCallback = func (Metadata) -> ();
type Player__1 = 
 variant {
   plug: principal;
   stoic: principal;
 };
type PlayerRegisterResponse = 
 variant {
   err: variant {
          AlreadyExist;
          Unknown;
        };
   ok;
 };
type PlayerRegister = 
 record {
   name: text;
   player: Player;
 };
type PlayerInfosResponse = 
 variant {
   err: variant {
          NotFound;
          Unknown;
        };
   ok: text;
 };
type Player = 
 variant {
   plug: principal;
   stoic: principal;
 };
type Metagame = 
 service {
   addPlayer: (PlayerRegister) -> (PlayerRegisterResponse);
   checkUsernameAvailable: (UserName) -> (bool) query;
   checkWalletExists: (UserWallet, text) -> (bool) query;
   createGame: (text, text) -> (principal);
   getAllUsers: () -> (vec Users) query;
   getInfosOfPlayer: (Player) -> (PlayerInfosResponse);
   getScoreTokenCreated: () -> (bool) query;
   getUser: (UserWallet, text) -> (opt Users) query;
   metascoreRegisterSelf: (RegisterCallback) -> ();
   metascoreScores: () -> (vec Score) query;
   register: () -> (Result);
   saveUser: (UserName, text, UserWallet) -> (opt Users);
   saveUserScore: (UserWallet, text, ScoreCC, Highscore) -> (bool);
   setGameInProgressData: (GameStatus, text) -> (bool);
   setScoreTokenCreated: () -> (bool);
   testBasic: () -> (bool);
   testPlayer: (Player) -> (bool);
 };
type Metadata = record {name: text;};
type Level = nat;
type Highscore__1 = nat;
type Highscore = nat;
type GamesWon = nat;
type GamesPlayed = nat;
type GameStatus = text;
service : () -> Metagame
